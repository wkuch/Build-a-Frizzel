{"version":3,"sources":["components/atoms/LoadingIndicator.js","components/atoms/DropdownSelection.js","components/molecules/Builder.js","components/pages/Home.js","serviceWorker.js","index.js","assets/images/fill.png","assets/images/fill_2.png","assets/images/siluette.png"],"names":["LoadingIndicator","color","DropdownSelection","props","Pane","display","padding","background","borderRadius","flex","alignItems","Heading","label","SelectMenu","title","options","selected","onSelect","item","value","Button","useSelectedAsButtonText","fallbackButtonText","siluetteStyleSmall","width","position","imageStyleSmall","Builder","state","size","undefined","filling","mainColor","firstSpotColor","secondSpotColor","firstSpots","secondSpots","blueFilling","spots","location","src","this","setState","cloneDeep","orangeFilling","dataUrl","console","log","spot","spotNumber","Checkbox","checked","onChange","e","indexOf","className","style","direction","justifyContent","outline","map","renderSpotSelection","Component","Home","showSidebar","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.7f5e3d88.chunk.js","sourcesContent":["import React from 'react';\r\nimport { HashLoader } from 'react-spinners';\r\n\r\nexport const LoadingIndicator = () => (\r\n  <HashLoader color={'6793c8'} />\r\n)","import React from 'react';\r\nimport { Pane, Button, Heading, SelectMenu } from 'evergreen-ui'\r\n\r\n\r\nexport const DropdownSelection = (props) => (\r\n  <Pane display=\"flex\" padding={8} background=\"tint2\" borderRadius={3}>\r\n    <Pane flex={1} alignItems=\"center\" display=\"flex\">\r\n      <Heading>{props.label}</Heading>\r\n    </Pane>\r\n    <Pane>\r\n      <Pane>\r\n        <SelectMenu\r\n          title={props.label}\r\n          options={props.options}\r\n          selected={props.selected}\r\n          onSelect={item => props.onSelect(item.value)}\r\n        >\r\n          <Button>{(props.useSelectedAsButtonText && props.selected) || props.fallbackButtonText}</Button>\r\n        </SelectMenu>\r\n      </Pane>\r\n    </Pane>\r\n  </Pane>\r\n)","import React, { Component, useState } from 'react';\r\nimport { LoadingIndicator } from '../atoms/LoadingIndicator';\r\nimport { Pane, Text, Button, Heading, SelectMenu, Label, Checkbox } from 'evergreen-ui'\r\nimport blueFilling from '../../assets/images/fill.png'\r\nimport orangeFilling from '../../assets/images/fill_2.png'\r\nimport outline from '../../assets/images/siluette.png'\r\nimport { screenCapture } from '../helpers/ScreenCapture';\r\nimport { DropdownSelection } from '../atoms/DropdownSelection';\r\nimport { cloneDeep } from \"lodash\"\r\n\r\n\r\nconst siluetteStyle = {\r\n  width: '40%',\r\n  position: 'relative'\r\n}\r\nconst siluetteStyleSmall = {\r\n  width: '80%',\r\n  position: 'relative'\r\n}\r\nconst imageStyle = {\r\n  width: '40%',\r\n  position: 'absolute'\r\n}\r\nconst imageStyleSmall = {\r\n  width: '80%',\r\n  position: 'absolute'\r\n}\r\n\r\nclass Builder extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      size: undefined,\r\n      filling: undefined,\r\n      mainColor: undefined,\r\n      firstSpotColor: undefined,\r\n      secondSpotColor: undefined,\r\n      firstSpots: undefined,\r\n      secondSpots: undefined\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const filling = blueFilling\r\n    let spots = [\r\n      {\r\n        selected: false,\r\n        location: 'Rechtes Ohr',\r\n        src: 'rechtesOhr.svg',\r\n      },\r\n      {\r\n        selected: false,\r\n        location: 'Linkes Ohr',\r\n        src: 'linkesOhr.svg',\r\n      },\r\n      {\r\n        selected: false,\r\n        location: 'Bauch',\r\n        src: 'bauch.svg',\r\n      },\r\n      {\r\n        selected: false,\r\n        location: 'Schwanz',\r\n        src: 'schwanz.svg',\r\n      },\r\n    ]\r\n    this.setState({ filling, firstSpots: spots, secondSpots: cloneDeep(spots) })\r\n  }\r\n\r\n  changeColor() {\r\n    if (this.state.filling === blueFilling) {\r\n      this.setState({ filling: orangeFilling })\r\n    } else {\r\n      this.setState({ filling: blueFilling })\r\n    }\r\n  }\r\n\r\n  onExportClick(dataUrl) {\r\n    console.log(dataUrl)\r\n  }\r\n\r\n  renderSpotSelection(spot, spotNumber){\r\n    return (\r\n      <Checkbox \r\n        label={spot.location}\r\n        checked = {spot.selected}\r\n        onChange={e => {\r\n          this.setState(state => {\r\n            if(spotNumber === 0){\r\n              state.firstSpots[state.firstSpots.indexOf(spot)].selected = !spot.selected\r\n            } else {\r\n              state.secondSpots[state.secondSpots.indexOf(spot)].selected = !spot.selected\r\n            }\r\n            return state\r\n          })\r\n        }}\r\n      />\r\n    )\r\n  }\r\n    \r\n  \r\n\r\n  render() {\r\n    const filling = this.state.filling\r\n    if (!filling) {\r\n      return (\r\n        <LoadingIndicator />\r\n      )\r\n    }\r\n    {/* <Button onClick={() => screenCapture(this.imageBox, (dateUrl) => this.onExportClick(dateUrl))}>Export</Button> */ }\r\n    return (\r\n      <Pane className='container'>\r\n        <Pane style={{ position: 'relative' }} display='flex' direction='column' alignItems='center' justifyContent='center'>\r\n          <img src={this.state.filling} style={imageStyleSmall} />\r\n          <img src={outline} style={siluetteStyleSmall} />\r\n        </Pane>\r\n        <Heading size={600}>\r\n          Farben\r\n        </Heading>\r\n        <DropdownSelection\r\n          label='Hauptfarbe'\r\n          options={\r\n            ['rot', 'rosa', 'hellblau', 'dunkelblau', 'hellgrün']\r\n              .map(label => ({ label, value: label }))\r\n          }\r\n          selected={this.state.mainColor}\r\n          useSelectedAsButtonText\r\n          fallbackButtonText='Auswahl ...'\r\n          onSelect={selected => this.setState({ mainColor: selected })}\r\n        />\r\n        <DropdownSelection\r\n          label='Fleckenfarbe 1'\r\n          options={\r\n            ['rot', 'rosa', 'hellblau', 'dunkelblau', 'hellgrün']\r\n              .map(label => ({ label, value: label }))\r\n          }\r\n          selected={this.state.firstSpotColor}\r\n          useSelectedAsButtonText\r\n          fallbackButtonText='Auswahl ...'\r\n          onSelect={selected => this.setState({ firstSpotColor: selected })}\r\n        />\r\n        <DropdownSelection\r\n          label='Fleckenfarbe 2'\r\n          options={\r\n            ['rot', 'rosa', 'hellblau', 'dunkelblau', 'hellgrün']\r\n              .map(label => ({ label, value: label }))\r\n          }\r\n          selected={this.state.secondSpotColor}\r\n          useSelectedAsButtonText\r\n          fallbackButtonText='Auswahl ...'\r\n          onSelect={selected => this.setState({ secondSpotColor: selected })}\r\n        />\r\n        <Heading size={600}>\r\n          Flecken 1\r\n        </Heading>\r\n          {this.state.firstSpots.map(spot => this.renderSpotSelection(spot, 0))}\r\n          <Heading size={600}>\r\n          Flecken 2\r\n        </Heading>\r\n          {this.state.secondSpots.map(spot => this.renderSpotSelection(spot, 1))}\r\n      </Pane>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Builder;","import React, { Component } from 'react';\nimport { Pane, Heading } from 'evergreen-ui'\nimport Builder from '../molecules/Builder';\n\n\nconst theme = {\n  global: {\n    colors: {\n      brand: '#6793c8',\n      selected: '#FD6FFF'\n    },\n    font: {\n      family: 'Roboto',\n      size: '18px',\n      height: '20px',\n    },\n  },\n};\n\n\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showSidebar: false,\n    }\n  }\n\n\n  render() {\n    return (\n      <Pane>\n        <Heading>\n          Heading\n        </Heading>\n        <Builder />\n      </Pane>\n    );\n  }\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './components/pages/Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Home />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/fill.da223547.png\";","module.exports = __webpack_public_path__ + \"static/media/fill_2.0abe6435.png\";","module.exports = __webpack_public_path__ + \"static/media/siluette.ce29c02a.png\";"],"sourceRoot":""}